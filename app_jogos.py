import streamlit as st                     # biblioteca para criar o dashboard web
import pandas as pd                        # biblioteca para manipular dados (DataFrame/CSV)
import plotly.express as px                # biblioteca para criar gr√°ficos interativos

# --- Configura√ß√£o da P√°gina ---
# Define t√≠tulo da aba, √≠cone e modo de largura total da p√°gina.
st.set_page_config(
    page_title="Dashboard de Vendas de Jogos",  # texto que aparece na aba do navegador
    page_icon="üéÆ",                              # emoji/√≠cone da aba
    layout="wide",                               # usa a largura inteira da tela
)

# --- Paleta global ---
PALETA = px.colors.qualitative.D3               # paleta de cores discreta (categorias) usada nos gr√°ficos

# --- Carregamento dos dados ---
try:
    df = pd.read_csv("top_50_jogos.csv")        # tenta ler o CSV 
except FileNotFoundError:
    st.error("Erro: O arquivo 'top_50_jogos.csv' n√£o foi encontrado. Verifique o caminho.")  # mostra erro amig√°vel
    st.stop()                                   # interrompe a execu√ß√£o do app para evitar falhas adiante

# --- Barra Lateral (Filtros) ---
st.sidebar.header("üîç Filtros")                 # t√≠tulo da se√ß√£o de filtros na sidebar

# Filtro de Ano
anos_disponiveis = sorted(df["Ano"].unique(), reverse=True)                 # lista de anos √∫nicos, ordenados do mais recente
anos_selecionados = st.sidebar.multiselect("Ano", anos_disponiveis,         # multiselect permite escolher um ou v√°rios anos
                                           default=anos_disponiveis)        # por padr√£o, todos os anos j√° v√™m selecionados

# Filtro por Tipo de G√™nero
generos_disponiveis = sorted(df["G√™nero"].unique())                         # lista de g√™neros √∫nicos, ordenados A‚ÜíZ
generos_selecionados = st.sidebar.multiselect("Tipo de G√™nero",             # multiselect para g√™neros
                                              generos_disponiveis,
                                              default=generos_disponiveis)  # padr√£o: todos selecionados

# Filtro por Plataforma
plataformas_disponiveis = sorted(df["Plataforma"].unique())                 # lista de plataformas √∫nicas
plataformas_selecionadas = st.sidebar.multiselect("Plataforma",             # multiselect para plataformas
                                                  plataformas_disponiveis,
                                                  default=plataformas_disponiveis)

# Filtro de Empresa de Jogos
empresas_disponiveis = sorted(df["Empresa_Jogos"].unique())                 # lista de empresas √∫nicas
empresas_selecionadas = st.sidebar.multiselect("Empresa de Jogos",          # multiselect para empresas
                                               empresas_disponiveis,
                                               default=empresas_disponiveis)

# --- Filtragem do DataFrame ---
# Aplica todos os filtros de uma vez; .isin verifica se o valor est√° entre os selecionados.
df_filtrado = df[
    (df["Ano"].isin(anos_selecionados)) &
    (df["G√™nero"].isin(generos_selecionados)) &
    (df["Plataforma"].isin(plataformas_selecionadas)) &
    (df["Empresa_Jogos"].isin(empresas_selecionadas))
]

# --- Conte√∫do Principal ---
st.title("üéÆ Dashboard de An√°lise de Vendas Globais de Jogos de Video-game")  # t√≠tulo principal da p√°gina
st.markdown("Explore os dados de vendas do top 50 jogos de 1984 a 2015. Use os filtros √† esquerda para refinar a sua an√°lise.")  # subt√≠tulo/descri√ß√£o
st.markdown("---")                                                           # linha horizontal para separar as se√ß√µes

# --- M√©tricas Principais (KPIs) ---
st.subheader("M√©tricas Gerais")                                              # subt√≠tulo da se√ß√£o de KPIs

# --- Fun√ß√£o para formatar a unidade  ---
def formatar_milhoes(valor):
    if valor >= 1000:                         # se for 1000 milh√µes ou mais (>= 1 bilh√£o)
        valor_formatado = valor / 1000        # converte milh√µes para bilh√µes
        return f"{valor_formatado:,.3f} bi"   # formata com 3 casas
    else:
        return f"{valor:,.3f} mi"             # caso contr√°rio, mant√©m em milh√µes com 3 casas

# Calculando as m√©tricas
if not df_filtrado.empty:                                                         # se o DataFrame filtrado tiver dados
    total_vendas_globais = df_filtrado["Vendas_Globais"].sum()                    # soma total das vendas globais (em milh√µes)
    jogo_mais_vendido = df_filtrado.loc[df_filtrado["Vendas_Globais"].idxmax()]["Nome"]  # pega o "Nome" do jogo com maior venda
    genero_mais_frequente = df_filtrado["G√™nero"].mode()[0]                       # g√™nero que mais aparece (moda)
    total_registros = len(df_filtrado)                                            # quantidade de linhas ap√≥s filtro
else:
    total_vendas_globais, jogo_mais_vendido, genero_mais_frequente, total_registros = 0, "", "", 0  # valores padr√£o se vazio
    st.warning("Nenhum dado encontrado para os filtros selecionados.")            # alerta visual na tela

# Cria 4 colunas para as m√©tricas (ficam lado a lado)
col1, col2, col3, col4 = st.columns(4)

col1.metric("Total de Vendas Globais", f"${formatar_milhoes(total_vendas_globais)}")  # KPI 1: total de vendas (mostra $ + mi/bi)
col2.metric("Jogo Mais Vendido", jogo_mais_vendido)                                   # KPI 2: nome do jogo com maior venda
col3.metric("G√™nero de Jogo Mais Popular", genero_mais_frequente)                     # KPI 3: g√™nero mais frequente nos dados filtrados
col4.metric("Total de Registros", f"{total_registros}")                               # KPI 4: n√∫mero de registros ap√≥s filtrar

st.markdown("---")                                                                    # separador visual

# --- An√°lises Visuais com Plotly ---
st.subheader("Gr√°ficos")                                                              # subt√≠tulo dos gr√°ficos

# Cria uma grade com duas colunas para os dois primeiros gr√°ficos
col_graf1, col_graf2 = st.columns(2)

with col_graf1:
    if not df_filtrado.empty:
        # Agrupa por g√™nero, soma vendas globais, pega top 10, ordena do menor para o maior (para barra horizontal ficar "crescente")
        top_generos = (
            df_filtrado.groupby('G√™nero')['Vendas_Globais'].sum()
            .nlargest(10)                              # pega os 10 maiores totais
            .sort_values(ascending=True)               # ordena para exibir do menor para o maior no eixo Y
            .reset_index()                             # volta a ser DataFrame com coluna 'G√™nero'
        )
        # Cria gr√°fico de barras horizontal (orientation='h')
        grafico_generos = px.bar(
            top_generos,
            x='Vendas_Globais',                        # valor no eixo X (quantidade)
            y='G√™nero',                                # categorias no eixo Y (g√™neros)
            orientation='h',                           # barras na horizontal
            title="Top 10 g√™neros de jogos mais vendidos globalmente",
            labels={'Vendas_Globais': 'Vendas Globais (milh√µes)', 'G√™nero': ''},  # r√≥tulos dos eixos
            color_discrete_sequence=PALETA             # paleta de cores definida no topo
        )
        grafico_generos.update_layout(title_x=0.1, yaxis={'categoryorder':'total ascending'})  # posiciona t√≠tulo e ordena categorias
        st.plotly_chart(grafico_generos, use_container_width=True)               # renderiza o gr√°fico ocupando a largura da coluna
    else:
        st.warning("Nenhum dado para exibir no gr√°fico de g√™neros.")             # aviso se n√£o houver dados filtrados

with col_graf2:
    if not df_filtrado.empty:
        # Histograma: mostra quantos jogos por ano (contagem de linhas em cada ano)
        grafico_hist = px.histogram(
            df_filtrado,
            x='Ano',                                     # eixo X: ano de lan√ßamento
            nbins=30,                                    # quantidade de "caixas" (bins) do histograma
            title="Distribui√ß√£o do n√∫mero de jogos lan√ßados por ano",
            labels={'Ano': 'Anos', 'count': ''},         # r√≥tulos dos eixos
            color_discrete_sequence=PALETA               # paleta de cores
        )
        grafico_hist.update_layout(title_x=0.1)          # desloca um pouco o t√≠tulo para a esquerda
        st.plotly_chart(grafico_hist, use_container_width=True)  # mostra o gr√°fico
    else:
        st.warning("Nenhum dado para exibir no gr√°fico de distribui√ß√£o.")         # aviso se n√£o houver dados filtrados

# Segunda linha de gr√°ficos (2 colunas)
col_graf3, col_graf4 = st.columns(2)

with col_graf3:
    if not df_filtrado.empty:

        # Soma as vendas por regi√£o usando apenas os dados filtrados
        total_na = df_filtrado["Vendas_NA"].sum()        # Am√©rica do Norte
        total_eu = df_filtrado["Vendas_EU"].sum()        # Europa
        total_jp = df_filtrado["Vendas_JP"].sum()        # Jap√£o
        total_outros = df_filtrado["Outras_Vendas"].sum()# Outras regi√µes

        # Monta um DataFrame simples para alimentar o gr√°fico de pizza
        df_pizza = pd.DataFrame({
            'Regi√£o': ['Am√©rica do Norte', 'Europa', 'Jap√£o', 'Outras'],
            'Vendas': [total_na, total_eu, total_jp, total_outros]
        })

        # Gr√°fico de pizza mostrando a propor√ß√£o de vendas por regi√£o
        grafico_regiao = px.pie(
            df_pizza,
            names='Regi√£o',                               # fatias nomeadas por regi√£o
            values='Vendas',                              # tamanho da fatia = valor de vendas
            title='Propor√ß√£o das Vendas de Jogos por Regi√£o',
            color_discrete_sequence=PALETA                # paleta de cores
        )
        grafico_regiao.update_traces(textinfo='percent+label', textfont_size=14)  # mostra porcentagem e r√≥tulo na fatia
        grafico_regiao.update_layout(title_x=0.1)         # posiciona o t√≠tulo
        st.plotly_chart(grafico_regiao, use_container_width=True)  # exibe o gr√°fico
    else:
        st.warning("Nenhum dado para exibir no gr√°fico das regi√µes.")             # aviso se n√£o houver dados filtrados

with col_graf4:
    if not df_filtrado.empty:

        # Descobre as 3 empresas com maior soma de vendas no recorte filtrado
        top_empresas_nomes = (
            df_filtrado.groupby('Empresa_Jogos')['Vendas_Globais'].sum()
            .nlargest(3)                                  # pega as 3 maiores somas
            .index.tolist()                               # extrai s√≥ os nomes (√≠ndice ‚Üí lista)
        )

        # Filtra o DF para conter apenas essas empresas top 3
        df_top_empresas = df_filtrado[df_filtrado['Empresa_Jogos'].isin(top_empresas_nomes)]

        # Soma as vendas por ano para cada empresa (prepara dados para o gr√°fico de linha)
        vendas_por_ano_empresa = (
            df_top_empresas.groupby(['Ano', 'Empresa_Jogos'])['Vendas_Globais']
            .sum()
            .reset_index()
        )

        # Gr√°fico de linhas mostrando a evolu√ß√£o anual das vendas das 3 empresas
        grafico_empresas = px.line(
            vendas_por_ano_empresa,
            x='Ano',                                       # eixo X: ano
            y='Vendas_Globais',                            # eixo Y: vendas globais (milh√µes)
            color='Empresa_Jogos',                         # uma linha por empresa
            title="Evolu√ß√£o das vendas globais das 3 principais empresas ao longo do tempo",
            color_discrete_sequence=PALETA                 # paleta de cores
        )
        grafico_empresas.update_layout(xaxis_title="Anos", yaxis_title="Vendas Globais (milh√µes)")  # r√≥tulos dos eixos
        st.plotly_chart(grafico_empresas, use_container_width=True)  # exibe o gr√°fico
    else:
        st.warning("Nenhum dado para exibir no gr√°fico de empresas.")              # aviso se n√£o houver dados filtrados

# --- Tabela de Dados Detalhados ---
st.subheader("Dados Detalhados")                     # subt√≠tulo da tabela
st.dataframe(df_filtrado)                            # mostra o DataFrame filtrado em formato de tabela interativa
